user www www;
worker_processes auto;

error_log /home/wwwlogs/error_nginx.log crit;
pid /var/run/nginx.pid;
worker_rlimit_nofile 51200;

events {
  use epoll;
  worker_connections 51200;
  multi_accept on;
}

http {
  include mime.types;
  default_type application/octet-stream;
  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 1024m;
  client_body_buffer_size 10m;
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 120;
  server_tokens off;
  tcp_nodelay on;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  #Gzip Compression
  gzip on;
  gzip_buffers 16 8k;
  gzip_comp_level 6;
  gzip_http_version 1.1;
  gzip_min_length 256;
  gzip_proxied any;
  gzip_vary on;
  gzip_types
    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml
    text/javascript application/javascript application/x-javascript
    text/x-json application/json application/x-web-app-manifest+json
    text/css text/plain text/x-component
    font/opentype application/x-font-ttf application/vnd.ms-fontobject
    image/x-icon;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";

  #If you have a lot of static files to serve through Nginx then caching of the files' metadata (not the actual files' contents) can save some latency.
  open_file_cache max=1000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;

  #lua module
  #https://github.com/openresty/lua-nginx-module
  lua_package_path "/usr/local/tengine/conf/waf/?.lua";
  lua_shared_dict limit 10m;
  init_by_lua_file  /usr/local/tengine/conf/waf/init.lua; 
  access_by_lua_file /usr/local/tengine/conf/waf/waf.lua;
  #security conf more  http://tengine.taobao.org/document_cn/http_limit_req_cn.html
  limit_req_zone $binary_remote_addr zone=one:3m rate=1r/s;
  limit_req_zone $binary_remote_addr $uri zone=two:3m rate=1r/s;
  limit_req_zone $binary_remote_addr $request_uri zone=three:3m rate=1r/s;

######################## default ############################
  server {
  listen 80;
  server_name _;
  access_log /home/wwwlogs/access_nginx.log combined;
  root /home/wwwroot/default;
  index index.html index.htm index.php;

  location ~ [^/]\.php(/|$) {
    #fastcgi_pass remote_php_ip:9000;
    fastcgi_pass unix:/dev/shm/php-cgi.sock;
    fastcgi_index index.php;
    include fastcgi.conf;
    }
  location / {
      #对/请求开启访问限制
        limit_req zone=one burst=5;
        limit_req zone=two forbid_action=@test1;
        limit_req zone=three burst=3 forbid_action=@test2;
    }
    location /off {
      #关闭访问限制
        limit_req off;
    }
    location @test1 {
        rewrite ^ /test1.html;
    }
    location @test2 {
        rewrite ^  /test2.html;
    }
    
    #static cache
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {
      expires 30d;
      access_log off;
    }
    location ~ .*\.(js|css)?$ {
      expires 7d;
      access_log off;
    }
    location ~ /\.ht {
      deny all;
    }
    #nginx status
    location /nginx_status {
      stub_status on;
      access_log off;
      allow 127.0.0.1;
      deny all;
    }
    #lua test, just for test, can Delete it
   location /luatest {
        default_type 'text/plain'; 
       content_by_lua_block {
           local regex = [[\d+]]
           local m = ngx.re.match("hello, 1234", regex)
             if m then ngx.say("hello, lua \n".."Find "..m[0].." \n Request info: \r "..ngx.req.raw_header()) else ngx.say("not matched!") end
         }
    }
    #luatest end
  }

########################## vhost #############################
  include vhost/*.conf;
}
